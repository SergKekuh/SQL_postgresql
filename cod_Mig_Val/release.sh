#!/bin/bash

# ANSI —Ü–≤–µ—Ç–∞
NC=$'\e[0m'
BLUE=$'\e[0;34m'
GREEN=$'\e[0;32m'
YELLOW=$'\e[1;33m'
RED=$'\e[0;31m'

# –§—É–Ω–∫—Ü–∏—è show_progress_bar
show_progress_bar() {
    local cmd="$1"
    local msg="$2"

    echo -ne "${BLUE}${msg}...   ${NC}"
    eval "$cmd" > /dev/null 2>&1 &
    local pid=$!

    local progress=0
    local total=20

    while kill -0 "$pid" 2>/dev/null; do
        sleep 0.1
        ((progress++))
        if [ $progress -gt $total ]; then
            progress=$total
        fi

        # –í—ã–≤–æ–¥–∏–º –±–∞—Ä –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
        printf $'\r%s[%s%s] %s%3d%%%%%s' \
            "$BLUE" \
            "$(printf '#%.0s' $(seq 1 $progress))" \
            " " \
            "$YELLOW" \
            "$((progress * 5))" \
            "$NC"
    done

    wait $pid
    local exit_code=$?
    
    # –û—á–∏—Å—Ç–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –∏ –ø–æ–∫–∞–∂–µ–º –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    printf $'\r%s[%s] %s%3d%%%%  %s%s\n' \
        "$BLUE" \
        "$(printf '#%.0s' $(seq 1 $total))" \
        "$NC" \
        "100" \
        "$GREEN[OK]$NC"

    return $exit_code
}

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")" || { echo -e "${RED}‚ùå –ù–µ –º–æ–≥—É –ø–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞${NC}"; exit 1; }

echo -e "${BLUE}üöÄ release.sh ‚Äî –ø–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞${NC}"

# --- –®–ê–ì 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–µ—Ä—Å–∏–∏ ---
echo -e "${BLUE}üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –∏–∑ Git...${NC}"
./version/generate_version.sh

if [ $? -ne 0 ]; then
    echo -e "${RED}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Ä—Å–∏—é${NC}"
    exit 1
fi

APP_VERSION=$(cat version/version.hpp | grep APP_VERSION | awk '{print $3}' | tr -d '"')
echo -e "${GREEN}üì¶ –í–µ—Ä—Å–∏—è: ${APP_VERSION}${NC}"

# --- –®–ê–ì 2: –û—á–∏—Å—Ç–∫–∞ –∏ —Å–±–æ—Ä–∫–∞ —á–µ—Ä–µ–∑ CMake --
echo -e "${BLUE}üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç —á–µ—Ä–µ–∑ CMake --fresh...${NC}"

rm -rf build && mkdir -p build
cd build || exit 1

show_progress_bar "cmake .." "CMake configure"
show_progress_bar "cmake --build . --clean-first" "CMake build"

cd ..

# --- –®–ê–ì 3: –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ ---
echo -e "${BLUE}üß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã...${NC}"

cd build || exit 1
ctest --verbose > /dev/null 2>&1
TEST_EXIT_CODE=$?
cd ..

if [ $TEST_EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã!${NC}"
    exit 1
fi

echo -e "${YELLOW}‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É...${NC}"

# –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
read -p $'\e[1;33müü° –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥: \e[0m' YEAR
read -p $'\e[1;33müü° –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂: \e[0m' SALES_THRESHOLD
read -p $'\e[1;33müü° –ú–Ω–æ–∂–∏—Ç–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.0): \e[0m' MULTIPLIER

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–≤–µ–¥–µ–Ω—ã
if [[ -z "$YEAR" || -z "$SALES_THRESHOLD" || -z "$MULTIPLIER" ]]; then
    echo -e "${RED}‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –≤—Å–µ —Ç—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –≥–æ–¥, –ø–æ—Ä–æ–≥ –ø—Ä–æ–¥–∞–∂ –∏ –º–Ω–æ–∂–∏—Ç–µ–ª—å.${NC}"
    exit 1
fi

# –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ main_–≤–µ—Ä—Å–∏—è
MAIN_EXE="main_$(cat version/version.hpp | grep APP_VERSION | awk '{print $3}' | tr -d '"')"

# –ö–æ–ø–∏—Ä—É–µ–º main, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –∫–æ—Ä–Ω–µ
if [ ! -f "./$MAIN_EXE" ]; then
    cp ./build/main ./$MAIN_EXE
fi

# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
echo -e "${BLUE}‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω—è–µ–º: ./${MAIN_EXE} ${YEAR} ${SALES_THRESHOLD} ${MULTIPLIER}${NC}"
"./${MAIN_EXE}" "$YEAR" "$SALES_THRESHOLD" "$MULTIPLIER"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
EXIT_CODE=$?
if [ $EXIT_CODE -ne 0 ]; then
    echo -e "${RED}‚ùå –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥ –≤—ã—Ö–æ–¥–∞: $EXIT_CODE)${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"